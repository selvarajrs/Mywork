pragma solidity ^0.4.0;
import "./ERC20.sol";
contract newtoken is ERC20Basic
{
    string standard="Token 1.0";
    string name;
    string symbol;
    uint256 public totalsupply;
    uint256  initialallowed;

    mapping(address=>uint) public balanceOf;
    mapping(address=>mapping(address=>uint256))public allowed;

    function newtoken()public
    {
        totalsupply=10000;
        balanceOf[msg.sender]=totalsupply;
        symbol="NT";
        initialallowed=500;
    }
    function transferFrom(address from, address to, uint256 value)public returns(bool) 
    {
        require(to != address(0));
        require(value <= balanceOf[from]);
        require(value <= allowed[from][msg.sender]);
    
        balanceOf[from]=balanceOf[from]-value;
        balanceOf[to] =balanceOf[to]+value;
        allowed[from][msg.sender] = allowed[from][msg.sender]-(value);
        Transfer(from,to,value);
        return true;
    }
    
    function transfer(address to, uint256 value) public returns (bool)
    {
        require(value<=balanceOf[msg.sender]);
        require(value<=allowed[msg.sender][to]);
        balanceOf[msg.sender]=balanceOf[msg.sender]-value;
        balanceOf[to]=balanceOf[to]+value;
        Transfer(msg.sender,to,value);
        return true;
    }
  
    function allowance(address _owner, address _to) public view returns (uint256) 
    {
        return allowed[_owner][_to];
    }
    function increaseApproval(address _to, uint value) public returns(bool)
    {
        allowed[msg.sender][_to]=allowed[msg.sender][_to]+(value);
        return true;
    }
    function decreaseApproval(address _to, uint value) public returns(bool)
    {
        allowed[msg.sender][_to]=allowed[msg.sender][_to]-(value);
        return true;
    }
    
    function totalSupply() public view returns (uint256)
    {
       return totalsupply;
    }
    function balanceOf(address _addr) public view returns (uint256)
    {
        return balanceOf[_addr];
    }
    function approve(address spender, uint256 value) public returns (bool)
    {
        allowed[msg.sender][spender]=value;
        return true;
    }
}
contract CrowdSale is newtoken
{
    uint256 public Rate;
    uint256 public startTime;
    uint256 public endTime;
    address wallet;
    uint256 amountCollected;
    
    modifier Time()
    {
        require(startTime<=now);
        require(endTime>=startTime);
        _;
    }
    
    function CrowdSale(uint256 _startTime,uint256 _endTime,address _wallet,uint256 _Rate)
    {
        startTime=_startTime;
        endTime=_endTime;
        wallet=_wallet;
        Rate=_Rate*1 ether;
        amountCollected=0;
    }
    
    function() Time payable public
    {
        uint256 amount=msg.value;
        uint256 tokens=amount*Rate;
        amountCollected=amountCollected+amount;
        balanceOf[wallet]=balanceOf[wallet]+amount;
        transfer(msg.sender,tokens);
    }
    function getTokenAmount(uint256 _amount) public view returns(uint256)
    {
        return (_amount*Rate);
    }
}